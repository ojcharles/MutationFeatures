#!/usr/bin/env python

# Copyright 2007, Michael J. Harms
# This program is distributed under General Public License v. 3.  See the file
# COPYING for a copy of the license.

__description__ = \
"""
pdb_close-contacts.py

Create a list of atoms that are within some distance cutoff of each other in
a pdb file.
"""

__author__ = "Michael J. Harms"
__date__ = ""

import os, shutil, sys
from pdbtools.helper import cmdline
from pdbtools import closecontacts

def main():
    """
    Function to call if run from command line.
    """
    cmdline.initializeParser(__description__,__date__)
    cmdline.addOption(short_flag="c",
                          long_flag="ca_only",
                          action="store_true",
                          default=False,
                          help="Use only CA atoms")
    cmdline.addOption(short_flag="d",
                          long_flag="distance",
                          action="store",
                          default=3.5,
                          help="Distance cutoff to identify close contacts.",
                          nargs=1,
                          type=float)

    file_list, options = cmdline.parseCommandLine()

    for pdb_file in file_list:

        f = open(pdb_file,'r')
        pdb = f.readlines()
        f.close()

        output = closecontacts.pdbCloseContacts(pdb,options.ca_only,options.distance)

        out = []
        out.append("# Close contacts for %s using a %.3f distance cutoff.\n" % (pdb_file,options.distance))
        out.append("%10s%16s%16s%12s\n" % (" ","atom1","atom2","dist"))
        for i, o in enumerate(output):
            out.append("%10i \"%s\" \"%s\"%12.3f\n" % (i,o[0],o[1],o[2]))

        g = open("%s.close_contacts" % pdb_file,"w")
        g.writelines(out)
        g.close()

# If run from command line...
if __name__ == "__main__":
    main()
