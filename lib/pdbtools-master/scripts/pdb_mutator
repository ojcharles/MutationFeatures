#!/usr/bin/env python

# Copyright 2007, Michael J. Harms
# This program is distributed under General Public License v. 3.  See the file
# COPYING for a copy of the license.

__description__ = \
"""
pdb_mutator.py

Mutates a residue in a pdb file.
"""

__author__ = "Michael J. Harms"
__date__ = "070729"
__description__ = "Mutates a residue in a pdb file"

import os, shutil, sys
from pdbtools.helper import cmdline
from pdbtools import mutator

def main():
    """
    To be called if module run from command line.
    """
    # Parse command line
    cmdline.initializeParser(__description__,__date__)
    cmdline.addOption(short_flag="c",
                      long_flag="chain",
                      action="store",
                      default=None,
                      help="CHAIN to mutate",
                      nargs=1)
    cmdline.addOption(short_flag="r",
                      long_flag="residue",
                      action="store",
                      type="int",
                      default=None,
                      help="Residue to mutate (REQUIRED)",
                      nargs=1)
    cmdline.addOption(short_flag="m",
                      long_flag="mutation",
                      action="store",
                      default=None,
                      help="Three-letter name of mutation (REQUIRED)",
                      nargs=1)
    cmdline.addOption(short_flag="s",
                      long_flag="simple",
                      action="store_true",
                      default=False,
                      help="No atoms beyond CB added (i.e. no CHARMM)")

    file_list, options = cmdline.parseCommandLine()

    # Parse command line options

    if options.residue == None:
        err = "Residue (-r) argument is required!"
        raise cmdline.parser.error(err)
    else:
        residue = options.residue

    if options.mutation == None:
        err = "Mutation (-m) argument is required!"
        raise cmdline.parser.error(err)
    else:
        mutation = options.mutation

    chain = options.chain
    run_charmm = not options.simple

    for file in file_list:

        f = open(file,'r')
        pdb = f.readlines()
        f.close()

        print("Loading %s" % file)
        pdb_id = file[:-4]
        pdb, mutation_string = mutator.pdbMutator(pdb,residue,mutation,chain,
                                          run_charmm)

        out_file = "%s_%s.pdb" % (pdb_id,mutation_string)
        g = open(out_file,"w")
        g.writelines(pdb)
        g.close()

        print("Mutated pdb written to %s" % out_file)

if __name__ == "__main__":
    main()
