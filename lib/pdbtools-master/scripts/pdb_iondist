#!/usr/bin/env python

# Copyright 2007, Michael J. Harms
# This program is distributed under General Public License v. 3.  See the file
# COPYING for a copy of the license.

__description__ = \
"""
pdb_ion-dist.py

Calculates the distribution of distances between titratable residues (from
titratable atoms in pdb_data.common) for acid/acid, acid/base, and base/base
interactions.
"""
__author__ = "Michael J. Harms"
__date__ = "080303"

import os, shutil, sys
from pdbtools.helper import cmdline
from pdbtools import iondist

def main():
    """
    Function to call if run from command line.
    """

    cmdline.initializeParser(__description__,__date__)
    cmdline.addOption(short_flag="s",
                          long_flag="step",
                          action="store",
                          default=0.1,
                          help="Histogram step",
                          nargs=1,
                          type=float)


    file_list, options = cmdline.parseCommandLine()

    histogram = [[] for i in range(3)]
    for pdb_file in file_list:

        f = open(pdb_file,'r')
        pdb = f.readlines()
        f.close()

        tmp_hist = iondist.pdbIonDist(pdb,options.step)

        # If the new histogram is longer than the total histogram, expand the
        # total histogram to take the new data
        if len(tmp_hist[0]) > len(histogram[0]):
            diff = len(tmp_hist[0]) - len(histogram[0])
            for i in range(3):
                histogram[i].extend([0 for j in range(diff)])

        # Take data from temporary histogram and append to total histogram
        for i in range(len(tmp_hist[0])):
            for j in range(3):
                histogram[j][i] += tmp_hist[j][i]

    # Create pretty output
    out = ["%10s%10s%10s%10s%10s\n" % (" ","dist","a-a","a-b","b-b")]
    for i in range(len(histogram[0])):
        step = options.step*i
        out.append("%10i%10.3F%10i%10i%10i\n" %
                   (i,step,histogram[0][i],histogram[1][i],histogram[2][i]))


    print("".join(out))



# If run from command line...
if __name__ == "__main__":
    main()
