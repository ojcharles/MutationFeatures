#!/usr/bin/env python

# Copyright 2007, 2012, Michael J. Harms
# This program is distributed under General Public License v. 3.  See the file
# COPYING for a copy of the license.

__description__ = \
"""
pdb_residue-renumber.py

A tool for renumbering the residues of a pdb file.  It allows the user to specify
a new starting residue number, then propagates that numbering down the file.
The user can specify whether or not to modify hetatms, whether to remove gaps
(that is, make the numbering continuous), and whether to modify a particular
chain.
"""

__author__ = "Michael J. Harms"
__date__ = "121204"

import os, shutil, sys
from pdbtools.helper import cmdline
from pdbtools import residue_renumber

def main():
    """
    Function to call if called from the command line.
    """
    # Parse command line
    cmdline.initializeParser(__description__,__date__)
    cmdline.addOption(short_flag="a",
                      long_flag="align-out",
                      action="store_true",
                      default=False,
                      help="write out residue alignment file.")
    cmdline.addOption(short_flag="s",
                      long_flag="start-res",
                      action="store",
                      type=int,
                      default=None,
                      help="Make the first residue in the file have s")
    cmdline.addOption(short_flag="r",
                      long_flag="renumber-het",
                      action="store_false",
                      default=True,
                      help="include hetatm entries in the renumbering.")
    cmdline.addOption(short_flag="g",
                      long_flag="remove-gaps",
                      action="store_true",
                      default=False,
                      help="make the sequence numbering continuous (remove gaps)")
    cmdline.addOption(short_flag="c",
                      long_flag="chain",
                      action="store",
                      type=str,
                      default=None,
                      help="only renumber this chain")


    file_list, options = cmdline.parseCommandLine()

    for pdb_file in file_list:

        f = open(pdb_file,'r')
        pdb = f.readlines()
        f.close()

        pdb_out, alignment = residue_renumber.pdbResidueRenumber(pdb,options.start_res,
                                                options.renumber_het,
                                                options.remove_gaps,
                                                options.chain)

        short_pdb = os.path.split(pdb_file)[-1][:-4]
        g = open("%s_res-renum.pdb" % short_pdb,"w")
        g.writelines(pdb_out)
        g.close()

        if options.align_out:
            print("Residue alignment written out.")

            alignment.insert(0,"#%s" % pdb_out[0])
            g = open("%s_res-algn.out" % short_pdb,'w')
            g.writelines(alignment)
            g.close()

if __name__ == "__main__":
    main()
