#!/usr/bin/env python

# Copyright 2007, Michael J. Harms
# This program is distributed under General Public License v. 3.  See the file
# COPYING for a copy of the license.

__description__ = \
"""
pdb_sasa.py

Calculate the solvent accessible surface area of every atom in a protein using
NACCESS.
"""
__author__ = "Michael J. Harms"
__date__ = "080129"

import os, shutil, sys
from pdbtools.helper import cmdline
from pdbtools import sasa

def main():
    """
    Function to call if run from command line.
    """
    cmdline.initializeParser(__description__,__date__)
    cmdline.addOption(short_flag="p",
                      long_flag="probe_radius",
                      action="store",
                      default=1.4,
                      help="specify probe radius (A)",
                      nargs=1,
                      type=float)
    cmdline.addOption(short_flag="z",
                      long_flag="z_sample",
                      action="store",
                      default=0.05,
                      help="fraction of atom radius to sample on z",
                      nargs=1,
                      type=float)
    cmdline.addOption(short_flag="v",
                      long_flag="vdw_file",
                      action="store",
                      default=None,
                      help="specify custom vdw file",
                      nargs=1,
                      type=str)
    cmdline.addOption(short_flag="d",
                      long_flag="standard_dir",
                      action="store",
                      default=None,
                      help="specify location of custom standards directory",
                      nargs=1,
                      type=str)
    cmdline.addOption(short_flag="k",
                      long_flag="keep_temp",
                      action="store_true",
                      default=False,
                      help="keep temporary files")

    file_list, options = cmdline.parseCommandLine()

    print("Generating standards.")
    standards = sasa.readStandards(options.standard_dir,options.probe_radius,
                              options.z_sample,options.vdw_file)

    for pdb_file in file_list:

        out = sasa.pdbSASA(pdb_file,options.probe_radius,options.z_sample,
                      options.vdw_file,options.keep_temp,standards)
        out = ["%10i%s" % (i,x) for i, x in enumerate(out)]

        out.insert(0,"%10s%10s%10s%12s%10s%10s\n" % \
                   (" ","atom","type","residue","abs","fract"))

        header = ["# Custom standards: %s\n" % options.standard_dir,
                  "# Custom radii file: %s\n" % options.vdw_file,
                  "# Probe radius: %.2F\n" % options.probe_radius,
                  "# Z-sampling: %.2F\n" % options.z_sample]
        out.insert(0,"".join(header))


        out_file = "%s_sasa.txt" % pdb_file[:-4]
        f = open(out_file,'w')
        f.writelines(out)
        f.close()


# If run from command line...
if __name__ == "__main__":
    main()
